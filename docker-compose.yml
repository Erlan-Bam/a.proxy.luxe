services:
  app:
    build:
      context: .
      target: ${TARGET:-dev}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  database:
    image: postgres:16.3-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    expose:
      - 5432

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    networks:
      - app-network
    command: >
      sh -c "
        mkdir -p /usr/local/etc/redis &&
        echo \"bind 0.0.0.0\" > /usr/local/etc/redis/redis.conf &&
        echo \"requirepass $REDIS_PASSWORD\" >> /usr/local/etc/redis/redis.conf &&
        echo \"appendonly yes\" >> /usr/local/etc/redis/redis.conf &&
        echo \"appendfsync everysec\" >> /usr/local/etc/redis/redis.conf &&
        echo \"user default on nopass ~* +@all\" > /usr/local/etc/redis/users.acl &&
        echo \"user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all\" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      "
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a $REDIS_PASSWORD ping | grep PONG" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge