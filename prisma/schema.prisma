// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  ru
  en
}

enum ProxyType {
  HTTPS
  SOCKS5
}

enum Proxy {
  ipv6
  isp
  resident
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
  PROCESSING
}

enum UserType {
  ADMIN
  USER
}

model User {
  id                    String   @id @default(uuid())
  type                  UserType @default(USER)
  email                 String   @unique
  password              String
  balance               Decimal  @default(0)
  isVerified            Boolean  @default(false)
  ip                    String   @default("0.0.0.0")
  lang                  String   @default("ru")
  isBanned              Boolean  @default(false)
  verification_code     String?
  change_password_code  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  totalPartnerEarn      Decimal  @default(0)
  orders                Order[]
  payments              Payment[]
  referrals             Referral[]          @relation("UserReferrals")
  referredBy            Referral?           @relation("UserReferredBy")
  partnerTransactions   PartnerTransaction[]
  partnerPayoutRequests PartnerPayoutRequest[]
  coupon                Coupon?             @relation("UserCoupon")
}
model Currency {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  value  Decimal 
}
model Referral {
  id        String   @id @default(uuid())
  partnerId String
  userId    String   @unique

  partner   User     @relation("UserReferrals", fields: [partnerId], references: [id])
  user      User     @relation("UserReferredBy", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Coupon {
  code        String   @id @db.VarChar(255)
  discount    Int
  limit       Int      @default(100)
  userId      String?  @unique
  user        User?    @relation("UserCoupon", fields: [userId], references: [id])
}

model Article {
  id             String   @id @default(uuid())
  title          String
  content        String   @db.Text
  lang           Language
  images         String[]
  slug           String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt @default(now())
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  country       String?
  quantity      Int?
  periodDays    String?
  tariff        String?
  proxyType     ProxyType     @default(HTTPS)
  type          Proxy         
  status        PaymentStatus @default(PENDING)  
  goal          String
  totalPrice    Decimal
  promocode     String?
  proxySellerId String?       @unique
  orderId       String?
  end_date      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  price           Decimal
  method          String
  inv             Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PartnerTransaction {
  id        String   @id @default(uuid())
  partnerId String
  amount    Decimal
  createdAt DateTime @default(now())

  partner   User     @relation(fields: [partnerId], references: [id])
}

model PartnerPayoutRequest {
  id        String        @id @default(uuid())
  partnerId String
  wallet    String
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  paidAt    DateTime?

  partner   User          @relation(fields: [partnerId], references: [id])
}